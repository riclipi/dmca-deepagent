generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  name               String
  password           String
  phone              String?
  address            String?
  document           String?
  dateOfBirth        DateTime?
  status             UserStatus          @default(PENDING_VERIFICATION)
  emailVerified      Boolean             @default(false)
  emailVerifiedAt    DateTime?
  planType           PlanType            @default(FREE)
  planExpiresAt      DateTime?
  lastLoginAt        DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  auditLogs          AuditLog[]
  brandProfiles      BrandProfile[]
  detectedContent    DetectedContent[]
  domainWhitelists   DomainWhitelist[]
  monitoringSessions MonitoringSession[]
  notifications      Notification[]
  subscriptions      Subscription[]
  takedownRequests   TakedownRequest[]

  // New DMCA automation relations
  keywordSearches KeywordSearch[]
  referenceImages ReferenceImage[]
  dmcaScores      DmcaScore[]
  keywordReviews  KeywordReview[]
  
  // Multi-agent system relations
  knownSites      KnownSite[]
  agentActivities AgentActivity[]
  scanSessions    ScanSession[]
  
  // Anti-abuse relations
  abuseScore      AbuseScore?
  
  // Integrations
  integrations    UserIntegration[]

  @@map("users")
}

model DomainWhitelist {
  id        String   @id @default(cuid())
  userId    String
  domain    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, domain], name: "user_domain_unique")
  @@map("domain_whitelists")
}

model BrandProfile {
  id           String   @id @default(cuid())
  userId       String
  brandName    String
  description  String?
  officialUrls String[]
  socialMedia  Json?
  keywords     String[]

  // Safe keyword generation fields
  safeKeywords      String[] // keywords aprovadas automaticamente
  moderateKeywords  String[] // keywords que precisam review
  dangerousKeywords String[] // keywords bloqueadas
  keywordConfig     Json? // configuração de geração
  lastKeywordUpdate DateTime?

  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  detectedContent    DetectedContent[]
  monitoringSessions MonitoringSession[]
  referenceImages    ReferenceImage[]
  scanSessions       ScanSession[]
  
  // Anti-abuse relations
  ownershipValidations OwnershipValidation[]

  @@map("brand_profiles")
}

model MonitoringSession {
  id              String   @id @default(cuid())
  userId          String
  brandProfileId  String
  name            String
  description     String?
  targetPlatforms String[]

  // Keywords integration - uses brandProfile.safeKeywords instead of separate searchTerms
  useProfileKeywords Boolean  @default(true)
  customKeywords     String[] // keywords adicionais específicas desta sessão
  excludeKeywords    String[] // keywords para excluir desta sessão

  // Real-time monitoring fields
  status            SessionStatus @default(IDLE)
  currentKeyword    String? // keyword sendo processada atualmente
  progress          Int           @default(0) // 0-100%
  totalKeywords     Int           @default(0) // total de keywords a processar
  processedKeywords Int           @default(0) // keywords já processadas

  // Scheduling
  lastScanAt    DateTime?
  nextScanAt    DateTime?
  scanFrequency Int       @default(24)
  isActive      Boolean   @default(true)

  // Results tracking
  resultsFound Int       @default(0)
  lastResultAt DateTime?

  // Performance tracking
  processingTime  Int?      // Duração total do scan em ms
  startedAt       DateTime? // Quando o scan iniciou
  completedAt     DateTime? // Quando o scan terminou

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  detectedContent DetectedContent[]
  brandProfile    BrandProfile      @relation(fields: [brandProfileId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([brandProfileId, isActive])
  @@index([lastScanAt, nextScanAt])
  @@map("monitoring_sessions")
}

model DetectedContent {
  id                  String        @id @default(cuid())
  userId              String
  brandProfileId      String
  monitoringSessionId String
  title               String
  description         String?
  contentType         ContentType
  infringingUrl       String
  platform            String
  thumbnailUrl        String?
  similarity          Float?
  priority            Priority      @default(MEDIUM)
  status              ContentStatus @default(DETECTED)
  isConfirmed         Boolean       @default(false)
  isProcessed         Boolean       @default(false)
  detectedAt          DateTime      @default(now())
  confirmedAt         DateTime?
  processedAt         DateTime?
  reviewedAt          DateTime?
  reviewedBy          String?       // Quem fez a revisão (AI ou user ID)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  // DMCA automation fields
  dmcaContactInfo     DmcaContactInfo?
  confidence          Int?             @default(0)
  keywordSource       String?
  platformType        String?
  imagesFound         String[]
  faceMatchConfidence Float?

  brandProfile      BrandProfile      @relation(fields: [brandProfileId], references: [id], onDelete: Cascade)
  monitoringSession MonitoringSession @relation(fields: [monitoringSessionId], references: [id], onDelete: Cascade)
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  takedownRequests  TakedownRequest[]

  @@index([userId, status, createdAt])
  @@index([brandProfileId, isConfirmed])
  @@index([monitoringSessionId, detectedAt])
  @@index([keywordSource, platform])
  @@map("detected_content")
}

model TakedownRequest {
  id              String              @id @default(cuid())
  userId          String
  detectedContent DetectedContent     @relation(fields: [detectedContentId], references: [id])
  detectedContentId String            @unique
  status          TakedownStatus      @default(PENDING)
  priority        Int                 @default(5)
  requestType     TakedownType        @default(DMCA)
  subject         String
  message         String              @db.Text
  sentAt          DateTime?
  acknowledgedAt  DateTime?
  resolvedAt      DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relacionamentos
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications   Notification[]
  removalProofs   RemovalProof[]
  
  @@map("takedown_requests")
}

model RemovalProof {
  id                String          @id @default(cuid())
  takedownRequestId String?
  url               String
  status            RemovalStatus
  proofType         ProofType
  verificationDate  DateTime        @default(now())
  screenshotPath    String?
  httpStatusCode    Int?
  responseBody      String?         @db.Text
  errorMessage      String?
  retryCount        Int             @default(0)
  metadata          Json            // RemovalMetadata as JSON
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relacionamentos
  takedownRequest   TakedownRequest? @relation(fields: [takedownRequestId], references: [id], onDelete: SetNull)
  
  @@index([url])
  @@index([status])
  @@index([verificationDate])
  @@index([takedownRequestId])
  @@map("removal_proofs")
}

model Notification {
  id                String           @id @default(cuid())
  userId            String
  takedownRequestId String?
  title             String
  message           String
  type              String
  isRead            Boolean          @default(false)
  readAt            DateTime?
  createdAt         DateTime         @default(now())
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  takedownRequest   TakedownRequest? @relation(fields: [takedownRequestId], references: [id], onDelete: SetNull)

  @@map("notifications")
}

model Plan {
  id                String   @id @default(cuid())
  name              String   @unique
  displayName       String
  description       String?
  price             Decimal  @db.Decimal(10, 2)
  currency          String   @default("BRL")
  interval          String   @default("monthly") // monthly, yearly, lifetime
  features          Json     // JSON array of features
  limits            Json     // JSON object with limits (profiles, takedowns, etc.)
  isActive          Boolean  @default(true)
  isPopular         Boolean  @default(false)
  sortOrder         Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  subscriptions     Subscription[]

  @@map("plans")
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String
  planId               String
  planType             PlanType           // Keep for backward compatibility
  status               SubscriptionStatus @default(ACTIVE)
  startDate            DateTime
  endDate              DateTime?
  cancelledAt          DateTime?
  cancelReason         String?
  amount               Decimal            @db.Decimal(10, 2)
  currency             String             @default("BRL")
  paymentMethod        String?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  lastBilledAt         DateTime?
  nextBillingAt        DateTime?
  trialEndsAt          DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan                 Plan               @relation(fields: [planId], references: [id])

  @@map("subscriptions")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String?
  details   Json?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model PlatformConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("platform_configs")
}

model DmcaTemplate {
  id        String   @id @default(cuid())
  name      String
  language  String   @default("pt")
  subject   String
  body      String
  isDefault Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, language], name: "name_language")
  @@map("dmca_templates")
}

model UserRelation {
  id            String   @id @default(cuid())
  userId        String
  relatedUserId String
  relationType  String
  permissions   Json?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("user_relations")
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  PENDING_VERIFICATION
  DELETED
}

enum PlanType {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
  SUPER_USER
}

enum SessionStatus {
  IDLE
  RUNNING
  PAUSED
  COMPLETED
  ERROR
}

enum MonitoringStatus {
  ACTIVE
  PAUSED
  COMPLETED
  ERROR
}

enum TakedownStatus {
  PENDING
  SENT
  ACKNOWLEDGED
  REMOVED
  REJECTED
  FAILED
  DELISTED
  CONTENT_REMOVED
  IN_REVIEW
}

enum TakedownType {
  DMCA
  CEASE_AND_DESIST
  COPYRIGHT_CLAIM
  TRADEMARK_INFRINGEMENT
  PRIVACY_VIOLATION
  OTHER
}

enum ContentStatus {
  DETECTED        // Conteúdo detectado, aguardando revisão
  REVIEWED        // Conteúdo revisado (por IA ou usuário) e confirmado
  DMCA_SENT       // Solicitação DMCA enviada
  PENDING_REVIEW  // Aguardando resposta do provedor
  DELISTED        // Conteúdo removido/delisted
  REJECTED        // Solicitação rejeitada
  FALSE_POSITIVE  // Falso positivo - não é infração
  IGNORED         // Usuário escolheu ignorar
}

enum ContentType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// New models for DMCA automation
model DmcaContactInfo {
  id                String          @id @default(cuid())
  detectedContentId String          @unique
  email             String?
  isCompliant       Boolean         @default(false)
  contactPage       String?
  detectedMethod    String?
  confidence        Int             @default(0)
  additionalEmails  String[]
  lastCheckedAt     DateTime        @default(now())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  detectedContent   DetectedContent @relation(fields: [detectedContentId], references: [id], onDelete: Cascade)

  @@map("dmca_contact_info")
}

model KeywordSearch {
  id             String         @id @default(cuid())
  userId         String
  keyword        String
  platform       String
  lastSearchedAt DateTime?
  resultsCount   Int            @default(0)
  effectiveness  Float?         @default(0)
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  searchResults  SearchResult[]

  @@unique([userId, keyword, platform], name: "user_keyword_platform")
  @@map("keyword_searches")
}

model SearchResult {
  id              String        @id @default(cuid())
  keywordSearchId String
  url             String
  title           String?
  snippet         String?
  source          String // 'google', 'bing', 'serper'
  rankPosition    Int?
  foundAt         DateTime      @default(now())
  keywordSearch   KeywordSearch @relation(fields: [keywordSearchId], references: [id], onDelete: Cascade)

  @@map("search_results")
}

model ReferenceImage {
  id           String       @id @default(cuid())
  userId       String
  profileId    String
  faceId       String // AWS Rekognition Face ID
  imageUrl     String?
  confidence   Float        @default(0)
  isActive     Boolean      @default(true)
  uploadedAt   DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  brandProfile BrandProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("reference_images")
}

model DmcaScore {
  id             String   @id @default(cuid())
  userId         String
  overallScore   Int
  activeThreats  Int?
  removalSuccess Int?
  responseTime   Int?
  coverage       Int?
  level          String // 'Critical', 'Warning', 'Good', 'Excellent'
  calculatedAt   DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("dmca_scores")
}

model KeywordReview {
  id             String       @id @default(cuid())
  userId         String
  brandProfileId String
  keyword        String
  riskScore      Int // 0-100
  riskReasons    String[]
  status         ReviewStatus @default(PENDING)
  reviewedBy     String? // userId who reviewed
  reviewedAt     DateTime?
  reviewNotes    String?
  isApproved     Boolean?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, brandProfileId, keyword], name: "user_profile_keyword")
  @@map("keyword_reviews")
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  AUTO_APPROVED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  TRIAL
  PAST_DUE
  SUSPENDED
}

// Multi-agent system models
model KnownSite {
  id                String   @id @default(cuid())
  baseUrl           String   @unique
  domain            String   
  category          SiteCategory
  platform          String?  // "telegram", "discord", "forum", etc
  
  // Métricas de performance
  totalViolations   Int      @default(0)
  lastViolation     DateTime?
  lastChecked       DateTime?
  avgResponseTime   Int?     // em milliseconds
  isActive          Boolean  @default(true)
  riskScore         Int      @default(50) // 0-100
  
  // Metadados operacionais
  robotsTxtUrl      String?
  crawlDelay        Int      @default(1000)
  lastCrawlSuccess  Boolean  @default(true)
  blockedByRobots   Boolean  @default(false)
  
  // Relacionamentos
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  violationHistory  ViolationHistory[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([domain])
  @@index([category])
  @@index([riskScore, lastChecked])
  @@index([userId, isActive])
  @@map("known_sites")
}

model ViolationHistory {
  id              String   @id @default(cuid())
  knownSiteId     String
  knownSite       KnownSite @relation(fields: [knownSiteId], references: [id])
  
  url             String
  title           String?
  description     String?
  detectionMethod DetectionMethod
  riskLevel       RiskLevel
  aiConfidence    Float?   // 0-1 para análises Gemini
  
  // Status do takedown
  takedownSent    Boolean  @default(false)
  takedownDate    DateTime?
  resolved        Boolean  @default(false)
  resolvedDate    DateTime?
  
  detectedAt      DateTime @default(now())
  
  @@index([knownSiteId, detectedAt])
  @@index([takedownSent, resolved])
  @@map("violation_history")
}

model AgentActivity {
  id              String   @id @default(cuid())
  agentType       AgentType
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  
  sessionId       String   // Para agrupar atividades relacionadas
  status          AgentStatus
  startedAt       DateTime @default(now())
  completedAt     DateTime?
  
  // Métricas de performance
  sitesScanned    Int      @default(0)
  violationsFound Int      @default(0)
  newSitesFound   Int      @default(0)
  processingTime  Int?     // em seconds
  
  // Dados específicos do agente
  metadata        Json?    // Dados flexíveis por tipo de agente
  errorMessage    String?
  
  @@index([userId, sessionId])
  @@index([agentType, status])
  @@index([startedAt])
  @@map("agent_activities")
}

enum SiteCategory {
  FORUM
  SOCIAL_MEDIA
  FILE_SHARING
  ADULT_CONTENT
  MESSAGING
  UNKNOWN
}

enum DetectionMethod {
  KEYWORD_MATCH
  IMAGE_ANALYSIS
  CONTEXT_ANALYSIS
  AI_CLASSIFICATION
  MANUAL_REVIEW
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AgentType {
  ORCHESTRATOR
  KNOWN_SITES_SCANNER
  DISCOVERY_SCANNER
  CONTEXT_ANALYZER
  DMCA_GENERATOR
}

enum AgentStatus {
  IDLE
  RUNNING
  COMPLETED
  ERROR
  PAUSED
}

// Agent system tables
model ScanSession {
  id                  String    @id @default(cuid())
  userId              String
  brandProfileId      String
  status              SessionStatus @default(IDLE)
  totalSites          Int       @default(0)
  sitesScanned        Int       @default(0)
  violationsFound     Int       @default(0)
  errorCount          Int       @default(0)
  startedAt           DateTime  @default(now())
  completedAt         DateTime?
  estimatedCompletion DateTime?
  currentSite         String?
  lastError           String?
  metadata            Json?
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  user                User         @relation(fields: [userId], references: [id])
  brandProfile        BrandProfile @relation(fields: [brandProfileId], references: [id])
  
  @@index([userId, status])
  @@index([startedAt])
  @@index([brandProfileId, startedAt])
  @@index([completedAt])
  @@map("scan_sessions")
}

model ScanReport {
  id                  String    @id @default(cuid())
  sessionId           String    @unique
  totalSites          Int
  sitesScanned        Int
  violationsFound     Int
  errorCount          Int
  duration            Int       // em ms
  averageTimePerSite  Float
  violationsByRisk    Json
  topViolationSites   Json
  errors              Json
  generatedAt         DateTime  @default(now())
  
  @@map("scan_reports")
}

model SessionProgress {
  id                  String    @id @default(cuid())
  sessionId           String    @unique
  sitesScanned        Int       @default(0)
  violationsFound     Int       @default(0)
  errorCount          Int       @default(0)
  currentSite         String?
  estimatedCompletion DateTime?
  progress            Float     @default(0)
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  @@map("session_progress")
}

model AgentEvent {
  id          String    @id @default(cuid())
  type        String
  sessionId   String
  timestamp   DateTime  @default(now())
  data        Json
  
  @@index([sessionId, timestamp])
  @@map("agent_events")
}

model AgentMetric {
  id          String    @id @default(cuid())
  agentType   String
  metricType  String
  name        String
  value       Float
  unit        String
  timestamp   DateTime  @default(now())
  sessionId   String?
  userId      String?
  metadata    Json?
  
  @@index([name, timestamp])
  @@index([agentType, timestamp])
  @@index([sessionId])
  @@map("agent_metrics")
}

model CacheEntry {
  id          String    @id @default(cuid())
  key         String    @unique
  type        String
  value       Json
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  ttl         Int       // TTL em ms
  tags        String[]
  hits        Int       @default(0)
  
  @@index([type, createdAt])
  @@index([tags])
  @@index([expiresAt])
  @@map("cache_entries")
}

enum RemovalStatus {
  PENDING_VERIFICATION     // Aguardando primeira verificação
  CONTENT_STILL_ONLINE     // Conteúdo ainda está online
  CONTENT_REMOVED          // Conteúdo confirmadamente removido
  SITE_UNREACHABLE         // Site não acessível (pode estar offline)
  CONTENT_BLOCKED          // Conteúdo bloqueado/restrito geograficamente
  URL_REDIRECTED           // URL redirecionada
  VERIFICATION_FAILED      // Falha na verificação automática
  REQUIRES_MANUAL_REVIEW   // Precisa de revisão manual
}

enum ProofType {
  HTTP_404_NOT_FOUND
  HTTP_410_GONE
  HTTP_403_FORBIDDEN
  CONTENT_REMOVED_MESSAGE
  DMCA_TAKEDOWN_NOTICE
  SITE_OFFLINE
  MANUAL_VERIFICATION
  SCREENSHOT_EVIDENCE
}

// Anti-Abuse System Models
model AbuseScore {
  id            String         @id @default(cuid())
  userId        String         @unique
  currentScore  Float          @default(0)
  state         AbuseState     @default(CLEAN)
  lastViolation DateTime?
  violations    AbuseViolation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([state])
  @@index([currentScore])
  @@index([userId, state])
  @@map("abuse_scores")
}

model AbuseViolation {
  id           String       @id @default(cuid())
  userId       String
  scoreId      String
  type         ViolationType
  severity     Float        // 0.1 to 1.0
  description  String?
  metadata     Json?
  occurredAt   DateTime     @default(now())
  
  abuseScore   AbuseScore   @relation(fields: [scoreId], references: [id], onDelete: Cascade)
  
  @@index([userId, occurredAt])
  @@index([type])
  @@map("abuse_violations")
}

model OwnershipValidation {
  id            String              @id @default(cuid())
  userId        String
  brandProfileId String
  domain        String?
  method        ValidationMethod
  status        ValidationStatus
  verificationToken String?
  validatedAt   DateTime?
  expiresAt     DateTime?
  score         Float               @default(0) // 0 to 1
  attempts      Int                 @default(0)
  metadata      Json?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  brandProfile  BrandProfile        @relation(fields: [brandProfileId], references: [id], onDelete: Cascade)
  
  @@unique([brandProfileId, method])
  @@index([userId, status])
  @@map("ownership_validations")
}

model UserActivity {
  id          String   @id @default(cuid())
  userId      String
  action      String
  metadata    Json?
  ip          String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  @@index([userId, action, createdAt])
  @@map("user_activities")
}

enum AbuseState {
  CLEAN
  WARNING
  HIGH_RISK
  BLOCKED
}

enum ViolationType {
  SPAM_KEYWORDS
  EXCESSIVE_REQUESTS
  SUSPICIOUS_PATTERNS
  MULTIPLE_ACCOUNTS
  COMPETITOR_MONITORING
  FAKE_OWNERSHIP
  API_ABUSE
  SCRAPING
}

enum ValidationMethod {
  DNS_TXT
  META_TAG
  FILE_UPLOAD
  EMAIL_CONFIRMATION
  SOCIAL_MEDIA
  TRADEMARK_DB
  MANUAL_REVIEW
}

enum ValidationStatus {
  PENDING
  VERIFIED
  FAILED
  EXPIRED
  MANUAL_REVIEW_REQUIRED
}

// User Integration model for storing OAuth tokens
model UserIntegration {
  id           String    @id @default(cuid())
  userId       String
  provider     String    // GMAIL, GOOGLE_DRIVE, etc
  accessToken  String    @db.Text
  refreshToken String?   @db.Text
  expiresAt    DateTime?
  status       String    @default("ACTIVE") // ACTIVE, REVOKED, EXPIRED
  lastSyncAt   DateTime?
  metadata     Json?     // Additional provider-specific data
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, provider])
  @@index([provider, status])
  @@map("user_integrations")
}
