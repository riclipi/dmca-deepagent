generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  name               String
  password           String
  phone              String?
  address            String?
  document           String?
  dateOfBirth        DateTime?
  status             UserStatus          @default(PENDING_VERIFICATION)
  emailVerified      Boolean             @default(false)
  emailVerifiedAt    DateTime?
  planType           PlanType            @default(FREE)
  planExpiresAt      DateTime?
  lastLoginAt        DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  auditLogs          AuditLog[]
  brandProfiles      BrandProfile[]
  detectedContent    DetectedContent[]
  domainWhitelists   DomainWhitelist[]
  monitoringSessions MonitoringSession[]
  notifications      Notification[]
  subscriptions      Subscription[]
  takedownRequests   TakedownRequest[]

  @@map("users")
}

model DomainWhitelist {
  id        String   @id @default(cuid())
  userId    String
  domain    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, domain], name: "user_domain_unique")
  @@map("domain_whitelists")
}

model BrandProfile {
  id                 String              @id @default(cuid())
  userId             String
  brandName          String
  description        String?
  officialUrls       String[]
  socialMedia        Json?
  keywords           String[]
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  detectedContent    DetectedContent[]
  monitoringSessions MonitoringSession[]

  @@map("brand_profiles")
}

model MonitoringSession {
  id              String            @id @default(cuid())
  userId          String
  brandProfileId  String
  name            String
  description     String?
  targetPlatforms String[]
  searchTerms     String[]
  status          MonitoringStatus  @default(ACTIVE)
  lastScanAt      DateTime?
  nextScanAt      DateTime?
  scanFrequency   Int               @default(24)
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  detectedContent DetectedContent[]
  brandProfile    BrandProfile      @relation(fields: [brandProfileId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("monitoring_sessions")
}

model DetectedContent {
  id                  String            @id @default(cuid())
  userId              String
  brandProfileId      String
  monitoringSessionId String
  title               String
  description         String?
  contentType         ContentType
  infringingUrl       String
  platform            String
  thumbnailUrl        String?
  similarity          Float?
  priority            Priority          @default(MEDIUM)
  isConfirmed         Boolean           @default(false)
  isProcessed         Boolean           @default(false)
  detectedAt          DateTime          @default(now())
  confirmedAt         DateTime?
  processedAt         DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  brandProfile        BrandProfile      @relation(fields: [brandProfileId], references: [id], onDelete: Cascade)
  monitoringSession   MonitoringSession @relation(fields: [monitoringSessionId], references: [id], onDelete: Cascade)
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  takedownRequests    TakedownRequest[]

  @@map("detected_content")
}

model TakedownRequest {
  id                String          @id @default(cuid())
  userId            String
  detectedContentId String
  status            TakedownStatus  @default(PENDING)
  platform          String
  recipientEmail    String
  subject           String
  message           String
  sentAt            DateTime?
  acknowledgedAt    DateTime?
  resolvedAt        DateTime?
  responseMessage   String?
  attempts          Int             @default(0)
  maxAttempts       Int             @default(3)
  nextRetryAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  detectedContent   DetectedContent @relation(fields: [detectedContentId], references: [id], onDelete: Cascade)
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("takedown_requests")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  isRead    Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String
  planType             PlanType
  status               String
  startDate            DateTime
  endDate              DateTime
  amount               Decimal  @db.Decimal(10, 2)
  currency             String   @default("BRL")
  paymentMethod        String?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String?
  details   Json?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model PlatformConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("platform_configs")
}

model DmcaTemplate {
  id        String   @id @default(cuid())
  name      String
  language  String   @default("pt")
  subject   String
  body      String
  isDefault Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, language], name: "name_language")
  @@map("dmca_templates")
}

model UserRelation {
  id            String   @id @default(cuid())
  userId        String
  relatedUserId String
  relationType  String
  permissions   Json?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("user_relations")
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  PENDING_VERIFICATION
  DELETED
}

enum PlanType {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
  SUPER_USER
}

enum MonitoringStatus {
  ACTIVE
  PAUSED
  COMPLETED
  ERROR
}

enum TakedownStatus {
  PENDING
  SENT
  ACKNOWLEDGED
  REMOVED
  REJECTED
  FAILED
}

enum ContentType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
