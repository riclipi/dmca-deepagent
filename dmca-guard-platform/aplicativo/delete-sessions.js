#!/usr/bin/env node

/**
 * Script para deletar sessions espec√≠ficas por ID
 * AVISO: Este script √© destrutivo e deve ser usado apenas em ambientes de teste
 */

const { PrismaClient } = require('@prisma/client');
const { 
  validateTestEnvironment, 
  logTestHeader,
  confirmAction 
} = require('./lib/test-utils');

const prisma = new PrismaClient();

async function main() {
  // Validate test environment
  validateTestEnvironment();
  
  // Log script header
  logTestHeader('DELETE MONITORING SESSIONS');
  
  try {
    // Get session IDs from command line arguments or environment
    let sessionIds = process.argv.slice(2);
    
    if (sessionIds.length === 0) {
      // Try to get from environment variable
      const envSessionIds = process.env.TEST_DELETE_SESSION_IDS;
      if (envSessionIds) {
        sessionIds = envSessionIds.split(',').map(id => id.trim());
      }
    }
    
    if (sessionIds.length === 0) {
      console.error('‚ùå ERRO: Nenhum ID de sess√£o fornecido!');
      console.error('\nUso:');
      console.error('  node delete-sessions.js <session_id_1> <session_id_2> ...');
      console.error('  ou configure TEST_DELETE_SESSION_IDS no arquivo .env');
      return;
    }
    
    console.log('‚ö†Ô∏è  AVISO: Esta opera√ß√£o √© irrevers√≠vel!');
    console.log(`üìã Sess√µes a serem deletadas: ${sessionIds.length}`);
    sessionIds.forEach((id, index) => {
      console.log(`  ${index + 1}. ${id}`);
    });
    console.log('');
    
    // Confirm action
    const confirmed = await confirmAction(`Isso deletar√° permanentemente ${sessionIds.length} sess√£o(√µes).`);
    if (!confirmed) {
      console.log('‚ùå Opera√ß√£o cancelada pelo usu√°rio.');
      return;
    }

    console.log('\nüóëÔ∏è  Iniciando dele√ß√£o...\n');
    
    let successCount = 0;
    let errorCount = 0;

    for (const sessionId of sessionIds) {
      console.log(`üîç Processando sess√£o: ${sessionId}`);

      try {
        // First check if session exists
        const session = await prisma.monitoringSession.findUnique({
          where: { id: sessionId },
          select: {
            id: true,
            name: true,
            _count: {
              select: {
                detectedContents: true,
                violationHistories: true
              }
            }
          }
        });

        if (!session) {
          console.log(`‚è≠Ô∏è  Sess√£o n√£o encontrada: ${sessionId}`);
          errorCount++;
          continue;
        }

        console.log(`   Nome: ${session.name}`);
        console.log(`   Conte√∫dos detectados: ${session._count.detectedContents}`);
        console.log(`   Hist√≥rico de viola√ß√µes: ${session._count.violationHistories}`);

        // Delete the session (cascade will handle related records)
        await prisma.monitoringSession.delete({
          where: { id: sessionId }
        });
        
        console.log(`‚úÖ Sess√£o deletada com sucesso: ${sessionId}`);
        successCount++;
      } catch (error) {
        console.log(`‚ùå Erro ao deletar sess√£o ${sessionId}: ${error.message}`);
        errorCount++;
      }
    }

    console.log('\nüìä Resumo da opera√ß√£o:');
    console.log(`‚úÖ Deletadas com sucesso: ${successCount}`);
    console.log(`‚ùå Erros: ${errorCount}`);

  } catch (error) {
    console.error('‚ùå Erro fatal durante a dele√ß√£o:', error);
  } finally {
    await prisma.$disconnect();
    console.log('\n--- SCRIPT FINALIZADO ---');
  }
}

// Execute only if called directly
if (require.main === module) {
  main().catch(console.error);
}

module.exports = main;