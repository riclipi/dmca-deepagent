generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/dmca-guard-platform/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Enum para status de usuário
enum UserStatus {
  ACTIVE
  SUSPENDED
  PENDING_VERIFICATION
  DELETED
}

// Enum para tipos de planos
enum PlanType {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

// Enum para status de monitoramento
enum MonitoringStatus {
  ACTIVE
  PAUSED
  COMPLETED
  ERROR
}

// Enum para status de takedown
enum TakedownStatus {
  PENDING
  SENT
  ACKNOWLEDGED
  REMOVED
  REJECTED
  FAILED
}

// Enum para tipos de conteúdo
enum ContentType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

// Enum para prioridade
enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Modelo principal de usuários (criadoras)
model User {
  id                String      @id @default(cuid())
  email             String      @unique
  name              String
  password          String
  phone             String?
  address           String?
  document          String?     // CPF/CNPJ
  dateOfBirth       DateTime?
  status            UserStatus  @default(PENDING_VERIFICATION)
  emailVerified     Boolean     @default(false)
  emailVerifiedAt   DateTime?
  planType          PlanType    @default(FREE)
  planExpiresAt     DateTime?
  lastLoginAt       DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relacionamentos
  brandProfiles     BrandProfile[]
  monitoringSessions MonitoringSession[]
  detectedContent   DetectedContent[]
  takedownRequests  TakedownRequest[]
  notifications     Notification[]
  auditLogs         AuditLog[]
  subscriptions     Subscription[]

  @@map("users")
}

// Perfis de marca das criadoras
model BrandProfile {
  id              String    @id @default(cuid())
  userId          String
  brandName       String
  description     String?
  officialUrls    String[]  // URLs oficiais da criadora
  socialMedia     Json?     // Links de redes sociais
  keywords        String[]  // Palavras-chave para monitoramento
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relacionamentos
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  monitoringSessions MonitoringSession[]
  detectedContent DetectedContent[]

  @@map("brand_profiles")
}

// Sessões de monitoramento
model MonitoringSession {
  id              String            @id @default(cuid())
  userId          String
  brandProfileId  String
  name            String
  description     String?
  targetPlatforms String[]          // Plataformas a serem monitoradas
  searchTerms     String[]          // Termos de busca
  status          MonitoringStatus  @default(ACTIVE)
  lastScanAt      DateTime?
  nextScanAt      DateTime?
  scanFrequency   Int               @default(24) // Horas entre scans
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relacionamentos
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  brandProfile    BrandProfile      @relation(fields: [brandProfileId], references: [id], onDelete: Cascade)
  detectedContent DetectedContent[]

  @@map("monitoring_sessions")
}

// Conteúdo detectado como infrator
model DetectedContent {
  id                  String            @id @default(cuid())
  userId              String
  brandProfileId      String
  monitoringSessionId String
  title               String
  description         String?
  contentType         ContentType
  infringingUrl       String
  platform            String
  thumbnailUrl        String?
  similarity          Float?            // Score de similaridade (0-1)
  priority            Priority          @default(MEDIUM)
  isConfirmed         Boolean           @default(false)
  isProcessed         Boolean           @default(false)
  detectedAt          DateTime          @default(now())
  confirmedAt         DateTime?
  processedAt         DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Relacionamentos
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  brandProfile        BrandProfile      @relation(fields: [brandProfileId], references: [id], onDelete: Cascade)
  monitoringSession   MonitoringSession @relation(fields: [monitoringSessionId], references: [id], onDelete: Cascade)
  takedownRequests    TakedownRequest[]

  @@map("detected_content")
}

// Solicitações de remoção DMCA
model TakedownRequest {
  id                String          @id @default(cuid())
  userId            String
  detectedContentId String
  status            TakedownStatus  @default(PENDING)
  platform          String
  recipientEmail    String
  subject           String
  message           String          @db.Text
  sentAt            DateTime?
  acknowledgedAt    DateTime?
  resolvedAt        DateTime?
  responseMessage   String?         @db.Text
  attempts          Int             @default(0)
  maxAttempts       Int             @default(3)
  nextRetryAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relacionamentos
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  detectedContent   DetectedContent @relation(fields: [detectedContentId], references: [id], onDelete: Cascade)

  @@map("takedown_requests")
}

// Notificações para usuários
model Notification {
  id        String    @id @default(cuid())
  userId    String
  title     String
  message   String    @db.Text
  type      String    // 'content_detected', 'takedown_sent', 'takedown_resolved', etc.
  isRead    Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())

  // Relacionamentos
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Assinaturas e pagamentos
model Subscription {
  id              String    @id @default(cuid())
  userId          String
  planType        PlanType
  status          String    // 'active', 'canceled', 'expired', 'pending'
  startDate       DateTime
  endDate         DateTime
  amount          Decimal   @db.Decimal(10, 2)
  currency        String    @default("BRL")
  paymentMethod   String?
  stripeCustomerId String?
  stripeSubscriptionId String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relacionamentos
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// Logs de auditoria para compliance LGPD
model AuditLog {
  id          String    @id @default(cuid())
  userId      String?
  action      String    // 'login', 'data_access', 'data_update', 'data_delete', etc.
  resource    String?   // Recurso acessado/modificado
  details     Json?     // Detalhes da ação
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime  @default(now())

  // Relacionamentos
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

// Configurações da plataforma
model PlatformConfig {
  id          String    @id @default(cuid())
  key         String    @unique
  value       String    @db.Text
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("platform_configs")
}

// Templates de email DMCA
model DmcaTemplate {
  id          String    @id @default(cuid())
  name        String
  language    String    @default("pt")
  subject     String
  body        String    @db.Text
  isDefault   Boolean   @default(false)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([name, language], name: "name_language")
  @@map("dmca_templates")
}

// Relacionamentos de usuários (para funcionalidades futuras)
model UserRelation {
  id          String    @id @default(cuid())
  userId      String
  relatedUserId String
  relationType String   // 'manager', 'agent', 'partner'
  permissions Json?     // Permissões específicas
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("user_relations")
}
